# -*- coding: utf-8 -*-
"""fcc_predict_health_costs_with_regression - Aditya Venkat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/139cIxZMM7QXEwuALFECWjdfuXwp0k9tV
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries. You may or may not use all of these.
!pip install -q git+https://github.com/tensorflow/docs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

import tensorflow_docs as tfdocs
import tensorflow_docs.plots
import tensorflow_docs.modeling

# Import data
!wget https://cdn.freecodecamp.org/project-data/health-costs/insurance.csv
dataset = pd.read_csv('insurance.csv')
dataset.tail()

# Applying dummies to dataset
df = pd.DataFrame(dataset)
df = pd.get_dummies(df, columns=['sex', 'smoker', 'region'])
df = df.apply(lambda x: x.astype(int) if x.dtype == 'bool' else x) # Convert bool value dummies to numeric
df.head()

#Training dataset
train_dataset = df[:-(int(len(df)*0.2))]
test_dataset = df[-(int(len(df)*0.2)):]
train_labels = train_dataset.pop('expenses')
test_labels = test_dataset.pop('expenses')

#Building model layers
model = tf.keras.models.Sequential([
    tf.keras.layers.Input(shape=(len(train_dataset.keys()),)),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1)
])
model.compile(optimizer= tf.keras.optimizers.RMSprop(0.05), loss='mse', metrics=['mae', 'mse'])
model.fit(train_dataset, train_labels, epochs=150, validation_split=0.2)

model.summary()

# Test model by checking how well the model generalizes using the test set.
loss, mae, mse = model.evaluate(test_dataset, test_labels, verbose=2)

print("Testing set Mean Abs Error: {:5.2f} expenses".format(mae))

if mae < 3500:
  print("You passed the challenge. Great job!")
else:
  print("The Mean Abs Error must be less than 3500. Keep trying.")

# Plot predictions.
test_predictions = model.predict(test_dataset).flatten()

a = plt.axes(aspect='equal')
plt.scatter(test_labels, test_predictions)
plt.xlabel('True values (expenses)')
plt.ylabel('Predictions (expenses)')
lims = [0, 50000]
plt.xlim(lims)
plt.ylim(lims)
_ = plt.plot(lims,lims)